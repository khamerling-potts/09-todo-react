{"version":3,"sources":["Todo.js","NewTodo.js","App.js","index.js"],"names":["Todo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","update","bind","assertThisInitialized","idParameter","id","completed","react_default","a","createElement","className","style","color","onClick","marginRight","backgroundColor","text","removeTodo","cssFloat","event","console","log","target","xhttp3","XMLHttpRequest","onreadystatechange","readyState","status","document","getElementsByClassName","open","setRequestHeader","send","JSON","stringify","setState","Component","NewTodo","onSubmit","addTodo","htmlFor","value","input","onChange","type","placeholder","App","sortTodos","state","todos","_this2","src_NewTodo","newTodo","map","todo","src_Todo","key","sort","b","localeCompare","preventDefault","self","data","createRequest","toConsumableArray","concat","parse","responseText","todoId","remainingTodos","filter","_this3","fetch","method","headers","x-api-key","then","response","json","responseData","ReactDOM","render","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.59a44361.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass Todo extends Component {\n    constructor(props){\n        super(props)\n        // this.retrieve = this.retrieve.bind(this);\n         this.update = this.update.bind(this);\n         //this.removeTodo = this.removeTodo.bind(this);\n        // this.deleteClicked = this.deleteClicked.bind(this);\n        }\n    \n   render() {\n    // var className = \"todo\";\n    // if (this.state.completed) {\n    //   className = \"todo completed\";\n    // }\n    var idParameter = this.props.id;\n    var currentTodo = this.props;\n    //{console.log(\"current todo that will be passed to update: \" + currentTodo.text)}\n       if (currentTodo.completed){\n        return (\n            <div id = {this.props.id} className = \"col-sm-12 listdiv\">\n                {/* {console.log(this.props.id)} */}\n                \n               {/* {console.log(this.id)} */}\n            {/* <article id=\"{this.props.id}\" className=\"todo\">\n                <button className=\"check\"></button>\n                <p>{this.props.text}</p>\n            </article> */}\n            {/* {console.log(this)} */}\n            \n                 <li style = {{color: 'lightgrey'}}>\n                     {/* Make the ids a normal number instead of id */}\n                     <button onClick = {this.update} id={this.props.id} style={{marginRight: '10px', backgroundColor: '#ceffc9', color: 'black'}}>Done</button>\n                     <span className = {this.props.id} >{this.props.text} </span>\n                     <button onClick = {this.props.removeTodo.bind(this, idParameter)} id={this.props.id} style={{cssFloat: 'right', backgroundColor: '#ffbdaf', color: 'black'}}>Delete</button>\n                 </li>\n                 \n            </div>\n            );\n       }\n       else{\n        return (\n            <div id = {this.props.id} className = \"col-sm-12 listdiv\">\n                 <li>\n                   {/* Make the ids a normal number instead of id */}\n                   <button onClick = {this.update} id={this.props.id} style={{marginRight: '10px', backgroundColor: '#ceffc9'}}>Done</button>\n                   <span className = {this.props.id}>{this.props.text}</span>\n                   <button onClick = {this.props.removeTodo.bind(this, idParameter)} id={this.props.id} style={{cssFloat: 'right', backgroundColor: '#ffbdaf'}}>Delete</button>\n                 </li>\n\n            </div>\n            );\n       }\n        \n       \n   }\n\n   update(event){\n    const self = this;\n    {console.log(event.target.id)}\n    //{console.log(\"todo text that was updated: \" + event.target.parentNode.text)}\n    var id = event.target.id;\n    //todo.completed = true;\n    var data = {\n      completed: true\n    }\n\n    // Initalize AJAX Request\n    var xhttp3 = new XMLHttpRequest();\n\n    // Response handler\n    xhttp3.onreadystatechange = function() {\n\n        // Wait for readyState = 4 & 200 response\n        if (this.readyState === 4 && this.status === 200) {\n            //document.getElementById(id).parentNode.style.color = \"lightgrey\";\n            document.getElementsByClassName(id)[0].style.color = \"lightgrey\";\n           // document.getElementById(id).style.color = \"black\";\n\n\n            //document.getElementById(id).style.color = \"black\";\n            // parse JSON response\n            // var todo = JSON.parse(this.responseText);\n\n        } \n    };\n\n    {console.log(id)}\n    xhttp3.open(\"PUT\", \"https://cse204.work/todos/\"+id, true);\n\n    xhttp3.setRequestHeader(\"Content-type\", \"application/json\");\n    xhttp3.setRequestHeader(\"x-api-key\", \"f32d02-3f32cc-c59414-4b288d-c7f6a6\");\n    xhttp3.send(JSON.stringify(data));\n    self.setState({\n      completed: true\n    })\n   {console.log(this)}\n    //{console.log(event.target.parentNode.completed)}\n\n\n    // fetch('https://cse204.work/todos/'+todo.id,{\n    //   method: 'PUT',\n    //   headers:{\n    //     'x-api-key': 'f32d02-3f32cc-c59414-4b288d-c7f6a6',\n    //     'Content-type': 'application/json'\n    //   }\n    // })\n    // .then(response=>response.json())\n    //   .then((responseData)=>{\n    //     this.setState({todos: responseData});\n    //   })\n  }\n\n\n   \n\n//    deleteClicked(todoId){\n//     //this.retrieve(todoId);\n//     //this.update(todoId);\n//     this.removeTodo(todoId);\n//   }\n\n//    retrieve(todo){\n//     const self = this;\n//     fetch('https://cse204.work/todos/'+todo.id,{\n//       method: 'GET',\n//       headers:{\n//         'x-api-key': 'f32d02-3f32cc-c59414-4b288d-c7f6a6',\n//         'Content-type': 'application/json'\n//       }\n//     })\n//       .then(response=>response.json())\n//       .then((responseData)=>{\n//         self.setState({todos: responseData});\n//       })\n//   }\n\n\n\n  \n}\n\nexport default Todo;","import React, { Component } from 'react';\nimport './App.css';\n\nclass NewTodo extends Component {\n   render() {\n       return (\n        <div className = \"formdiv\">\n            {/* <div className=\"row\">\n            <div className=\"col-sm-12 addbar\"> */}\n            <form className=\"addform\" id=\"addform\" onSubmit = {this.props.addTodo}>\n                <label htmlFor=\"add\" className=\"formlabel\">To Do List</label>\n                <div className=\"input-group\">\n                <input value={this.props.input || ''} onChange={this.props.onChange} type=\"text\" className=\"form-control\" id=\"add\" placeholder=\"New item\"/>\n                <div className=\"input-group-addon\">\n                    <input type = \"submit\" value=\"Add Item\" className = \"addbutton\"></input>\n                </div>\n                </div>\n            </form>\n            {/* </div>\n            </div> */}\n        {/* <article id=\"{this.props.id}\" className=\"todo\">\n            <button className=\"check\"></button>\n            <p>{this.props.text}</p>\n        </article> */}\n\n        </div>\n       );\n   }\n}\n\nexport default NewTodo;","import React, { Component } from 'react';\nimport './App.css';\nimport Todo from './Todo';\nimport NewTodo from './NewTodo';\n\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.addTodo = this.addTodo.bind(this);\n    this.removeTodo = this.removeTodo.bind(this);\n    this.sortTodos = this.sortTodos.bind(this);\n   // this.update = this.update.bind(this);\n    \n    //this.componentDidMount = this.componentDidMount.bind(this);\n    this.state = {\n      todos: []\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        {/* <NewTodo addTodo={this.addTodo} />\n        <NewTodo newTodo={this.newTodo} onChange={this.onChange} input={this.state.input} /> */}\n        <div className=\"App\">\n          <h1>Kyra Hamerling-Potts' ToDo App</h1>\n          </div>\n          <section id=\"todos\">\n            <div className=\"row\">\n\n              <div className=\"col-sm-12 addbar\">\n              <NewTodo addTodo={this.addTodo} newTodo={this.newTodo} onChange={this.onChange} input={this.state.input}/>\n              </div>\n\n              <div className=\"col-sm-12 list\">\n                <ul id=\"todoList\">\n                {/* {console.log(this.state.todos)} */}\n                {this.state.todos.map((todo) =>\n                \n                // {console.log(todo.id)},\n                <Todo key={todo.id} id={todo.id} completed = {todo.completed} update = {this.update} removeTodo = {this.removeTodo} text={todo.text} />\n                \n                )}\n                </ul>\n              </div>\n\n              <div className=\"col-sm-12 sortButton\">\n                <button onClick = {this.sortTodos} style={{backgroundColor: '#ffefff'}} className = \"sortbtn\">Sort alphabetically</button>\n              </div>\n              \n            </div>\n            \n            \n          </section>\n      </div>  \n    );\n  }\n\n  sortTodos(){\n    this.state.todos.sort(function (a, b) {\n      return a.text.localeCompare(b.text);\n    })\n    this.setState({\n      todos: this.state.todos\n    })\n  }\n  \n  onChange = (event) =>{\n    // Set the state to the value of the input\n    const self = this;\n    //{console.log(event.target.value)}\n    self.setState({\n      input: event.target.value \n    });\n  }\n\n  addTodo(event){\n    event.preventDefault();\n    const self = this;\n    const newTodoText = self.state.input;\n   //{console.log(event.target.id)}\n    //{console.log(this.state.input)}\n    var data = {\n      text: newTodoText\n    }\n\n    //{console.log(data)}\n    //var self = this;\n    var createRequest = new XMLHttpRequest();\n    createRequest.onreadystatechange = function () {\n    if (this.readyState === 4 && this.status === 200) {\n      // save new Todo to state\n      self.setState({\n        todos: [...self.state.todos, JSON.parse(this.responseText)]\n      })\n      // clear the input field\n      self.setState({input: ''});\n  }     \n}\n  createRequest.open(\"POST\", \"https://cse204.work/todos\", true);\n  createRequest.setRequestHeader(\"Content-type\", \"application/json\");\n  createRequest.setRequestHeader(\"x-api-key\", \"f32d02-3f32cc-c59414-4b288d-c7f6a6\");\n  createRequest.send(JSON.stringify(data));\n  \n    // fetch('https://cse204.work/todos',{\n    //   method: 'POST',\n    //   headers:{\n    //     'x-api-key': 'f32d02-3f32cc-c59414-4b288d-c7f6a6',\n    //     'Content-type': 'application/json'\n    //   }\n    // })\n    // this.setState({\n    //   todos: [...this.state.todos, newItem]\n    // })\n  }\n\n  removeTodo(todoId){\n    \n    //     fetch('https://cse204.work/todos/'+todo.id,{\n    //       method: 'DELETE',\n    //       headers:{\n    //         'x-api-key': 'f32d02-3f32cc-c59414-4b288d-c7f6a6',\n    //         'Content-type': 'application/json'\n    //       }\n    //     })\n    //     .then(response=>response.json())\n    //       .then((responseData)=>{\n    //         this.setState({todos: responseData});\n    //       })\n    //   }\n    \n        const self = this;\n        {console.log(todoId)}\n       // {console.log(todo)}\n        //Initalize AJAX Request\n        var createRequest = new XMLHttpRequest();\n        createRequest.onreadystatechange = function () {\n        if (this.readyState === 4 && this.status === 200) {\n            // You need the id of the todo you want to delete as a variable.\n            const remainingTodos = self.state.todos.filter((todo) => {\n             // Looping through all todos, if the id of the current todo DOES NOT equal the id of the todo we want to delete, keep it\n                if (todo.id !== todoId) {\n                    return todo;\n                }\n            });\n            // Update state with filtered list using this.setState();\n            self.setState({\n                todos: remainingTodos\n            })\n            {console.log(remainingTodos)}\n        }     \n        }\n        \n        createRequest.open(\"DELETE\", \"https://cse204.work/todos/\"+todoId, true);\n        createRequest.setRequestHeader(\"Content-type\", \"application/json\");\n        createRequest.setRequestHeader(\"x-api-key\", \"f32d02-3f32cc-c59414-4b288d-c7f6a6\");\n        createRequest.send();\n    }\n\n    \n  componentDidMount() {\n    {console.log(\"componentdidmount activated\")}\n    const self = this;\n    // // AJAX goes here\n    // var createRequest = new XMLHttpRequest();\n    // createRequest.onreadystatechange = function () {\n    // if (this.readyState === 4 && this.status === 200) {\n    //   {console.log(\"ajax successful\")}\n    //   // If AJAX successful, parse the JSON and save to state\n    //   var todos = JSON.parse(this.responseText);\n    //   self.setState({todos: todos});\n    //   {console.log(\"Requested todos: \" + self.state.todos)}\n    // }\n    \n    // }\n    // createRequest.open(\"GET\", \"https://cse204.work/todos\", true);\n    // createRequest.setRequestHeader(\"x-api-key\",\"f32d02-3f32cc-c59414-4b288d-c7f6a6\");\n    // createRequest.send();\n\n    // Make API call to fetch existing Todos.\n    fetch('https://cse204.work/todos',{\n      \"method\": \"GET\",\n      \"headers\":{\n        'x-api-key': 'f32d02-3f32cc-c59414-4b288d-c7f6a6',\n        //'Content-type': 'application/json'\n      }\n    })\n    //I used Free Code Camp to understand processing response data\n      .then(response=>response.json())\n      .then((responseData)=>{\n        this.setState({todos: responseData});\n      })\n  //     .then(function (response) {\n  //       self.setState({todos: JSON.parse(response)});\n  //     }\n  //  )\n  }\n  \n  // componentWillUpdate() {\n  //   // Make modifications like re-ordering array \n  //   const toOrder = this.state.todos\n  //   toOrder.sort()\n  //   this.setState({todos: toOrder});\n  // }\n  \n  // componentWillUnmount() {\n  //   // clean-up\n  // }\n\n}\n\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// //I used the api documentation provided to help with javascript\n\n// document.addEventListener(\"DOMContentLoaded\", function(){\n\n//     //List all todos when page loads\n//     function listAllToDos(){\n//         var xhttp = new XMLHttpRequest();\n    \n//         xhttp.onreadystatechange = function() {\n//             if (this.readyState == 4 && this.status == 200) {\n//                 var todos = JSON.parse(this.responseText);\n//                 console.log(todos);\n//                 for(var i=0; i<todos.length; i++){\n//                     //display all list items with close buttons\n//                     var li = document.createElement(\"li\");\n                    \n//                     var checkbox = document.createElement(\"button\");\n//                     checkbox.innerHTML = \"Done\";\n//                     checkbox.id=i;\n//                     checkbox.style.marginRight = \"10px\";\n//                     checkbox.style.backgroundColor = \"#ceffc9\";\n//                     li.appendChild(checkbox);\n    \n//                     var todoLabel = document.createElement(\"label\");\n//                     todoLabel.id = i;\n//                     todoLabel.innerHTML = todos[i].text;\n//                     li.id=todos[i].id;\n//                     li.appendChild(todoLabel);\n    \n//                     var button = document.createElement(\"button\");\n//                     button.innerHTML = \"Delete\";\n//                     button.style.cssFloat = \"right\";\n//                     button.style.backgroundColor = \"#ffbdaf\";\n//                     li.appendChild(button);\n//                     button.id=i;\n    \n//                     if (todos[i][\"completed\"] == true){                      \n//                         todoLabel.innerHTML=todos[i].text.strike();\n//                         update(todos[i].id);\n//                     }\n//                     checkbox.addEventListener(\"click\", function(event){\n//                        var strikeText = document.getElementById(event.target.id).parentElement.childNodes[1];\n                      \n//                         strikeText.innerHTML=todos[event.target.id].text.strike();\n//                         console.log(todos[event.target.id].text.strike());\n//                         todos[event.target.id].completed = \"true\";\n                        \n//                     });\n//                     button.addEventListener(\"click\", function(event){\n//                         var id = todos[event.target.id].id;\n    \n//                         //call retrieve, which gets the todo\n//                         retrieve(id);\n    \n//                         //call update, which sends a put request\n//                         update(id);\n                        \n//                         //call remove function, which deletes the todo\n//                         remove(id);\n//                     });\n//                     document.getElementById(\"todoList\").appendChild(li);\n//                 }\n//             }\n//     };\n    \n//     xhttp.open(\"GET\", \"https://cse204.work/todos\", true);\n//     xhttp.setRequestHeader(\"x-api-key\",\"f32d02-3f32cc-c59414-4b288d-c7f6a6\");\n//     xhttp.send();\n//     }\n    \n//     listAllToDos();\n    \n    \n    \n    \n//     //Make new todo when form is submitted\n//     document.getElementById(\"addform\").addEventListener(\"submit\", (event)=>{\n//         event.preventDefault();\n//         // Setting variable for form input (get from HTML form)\n//         var data = {\n//            text: document.getElementById(\"add\").value\n//         }\n    \n//         // Initalize AJAX Request\n//         var xhttp2 = new XMLHttpRequest();\n    \n//         // Response handler\n//         xhttp2.onreadystatechange = function() {\n    \n//             // Wait for readyState = 4 & 200 response\n//             if (this.readyState == 4 && this.status == 200) {\n    \n//                 // parse JSON response\n//                 var todo = JSON.parse(this.responseText);\n//                 //w3schools helped me figure out how to create a new list item\n//                 var li = document.createElement(\"li\");\n//                 var checkbox = document.createElement(\"button\");\n//                 checkbox.innerHTML = \"Done\";\n//                 checkbox.style.marginRight = \"10px\";\n//                 checkbox.style.backgroundColor = \"#ceffc9\";\n//                 li.appendChild(checkbox);\n                \n//                 var todoLabel = document.createElement(\"label\");\n    \n//                 todoLabel.innerHTML = todo.text;\n//                 li.appendChild(todoLabel);\n//                 var button = document.createElement(\"button\");\n//                 button.innerHTML = \"Delete\";\n//                 button.style.cssFloat = \"right\";\n//                 button.style.backgroundColor = \"#ffbdaf\";\n//                 li.id=todo.id;\n           \n//                 if (todo[\"completed\"] == true){                  \n//                     todoLabel.innerHTML=todo.text.strike();\n//                     todo.completed = \"true\";\n//                 }\n//                 checkbox.addEventListener(\"click\", function(event){\n                   \n//                     var strikeText = checkbox.parentElement.childNodes[1];\n                      \n//                     strikeText.innerHTML=todo.text.strike();\n//                     todoLabel.innerHTML=todo.text.strike();\n//                     update(todo.id);\n                    \n//                 });\n//                     button.addEventListener(\"click\", function(event){\n//                         var id = todo.id;\n    \n//                         //call retrieve, which gets the todo\n//                         retrieve(id);\n    \n//                         //call update, which sends a put request\n//                         update(id);\n                        \n//                         //call remove function, which deletes the todo\n//                         remove(id);\n//                     });\n//                 li.appendChild(button);\n//                 document.getElementById(\"todoList\").appendChild(li);\n                \n                \n    \n//                 console.log(todo);\n    \n//             } else if (this.readyState == 4) {\n    \n//                 // this.status !== 200, error from server\n//                 console.log(this.responseText);\n    \n//             }\n//         };\n    \n//         xhttp2.open(\"POST\", \"https://cse204.work/todos\", true);\n    \n//         xhttp2.setRequestHeader(\"Content-type\", \"application/json\");\n//         xhttp2.setRequestHeader(\"x-api-key\", \"f32d02-3f32cc-c59414-4b288d-c7f6a6\");\n//         xhttp2.send(JSON.stringify(data));\n        \n//         document.getElementById(\"addform\").reset();\n//     });\n    \n    \n//     //retrieves info for todo, calls GET\n//     function retrieve(id){\n        \n//         // Initalize AJAX Request\n//         var xhttp5 = new XMLHttpRequest();\n    \n//         // Response handler\n//         xhttp5.onreadystatechange = function() {\n    \n//             // Wait for readyState = 4 & 200 response\n//             if (this.readyState == 4 && this.status == 200) {\n    \n//                 // parse JSON response\n//                 var todo = JSON.parse(this.responseText);\n                \n                \n//                 console.log(todo);\n    \n//             } else if (this.readyState == 4) {\n    \n//                 // this.status !== 200, error from server\n//                 console.log(this.responseText);\n    \n//             }\n//         };\n    \n//         console.log(id);\n//         xhttp5.open(\"GET\", \"https://cse204.work/todos/\"+id, true);\n    \n//         xhttp5.setRequestHeader(\"Content-type\", \"application/json\");\n//         xhttp5.setRequestHeader(\"x-api-key\", \"f32d02-3f32cc-c59414-4b288d-c7f6a6\");\n//         xhttp5.send();\n    \n//     }\n    \n//     function update(id){\n//         // Including json object\n//         var data = {\n//             completed: true\n//         }\n//          // Initalize AJAX Request\n//          var xhttp3 = new XMLHttpRequest();\n     \n//          // Response handler\n//          xhttp3.onreadystatechange = function() {\n     \n//              // Wait for readyState = 4 & 200 response\n//              if (this.readyState == 4 && this.status == 200) {\n     \n//                  // parse JSON response\n//                  var todo = JSON.parse(this.responseText);\n                 \n     \n//                  console.log(todo);\n     \n//              } else if (this.readyState == 4) {\n     \n//                  // this.status !== 200, error from server\n//                  console.log(this.responseText);\n     \n//              }\n//          };\n     \n//          xhttp3.open(\"PUT\", \"https://cse204.work/todos/\"+id, true);\n     \n//          xhttp3.setRequestHeader(\"Content-type\", \"application/json\");\n//          xhttp3.setRequestHeader(\"x-api-key\", \"f32d02-3f32cc-c59414-4b288d-c7f6a6\");\n//          xhttp3.send(JSON.stringify(data));\n//     }\n    \n//     function remove(id){\n//          // Initalize AJAX Request\n//          var xhttp4 = new XMLHttpRequest();\n        \n//          // Response handler\n//          xhttp4.onreadystatechange = function() {\n     \n//              // Wait for readyState = 4 & 200 response\n//              if (this.readyState == 4 && this.status == 200) {\n//                 document.getElementById(id).remove();\n//              } else if (this.readyState == 4) {\n//                  // this.status !== 200, error from server\n//                  console.log(this.responseText);\n    \n                 \n     \n//              }\n//          };\n     \n//          xhttp4.open(\"DELETE\", \"https://cse204.work/todos/\"+id, true);\n     \n//          xhttp4.setRequestHeader(\"Content-type\", \"application/json\");\n//          xhttp4.setRequestHeader(\"x-api-key\", \"f32d02-3f32cc-c59414-4b288d-c7f6a6\");\n//          xhttp4.send();\n    \n         \n//     }\n    \n    \n//     });\n    \n    \n    "],"sourceRoot":""}